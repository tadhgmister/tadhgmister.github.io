:root {
    --ball-size: 50px;
    --tube-border-size: 3px;
    --tube-padding-size: 3px;
    --gap-size: 5px;
}
/** ensure buttons have a reasonable minimum size so they are easy to click on */
.ActionButton {
    min-height: 30pt;
    min-width: 40pt;
    margin: 5px;
}

.AuxStuff {
    /* leave a gap between buttons and link to instructions */
    margin-top: 1em;
    display: flex;
    /* get the info box to wrap upwards, assuming it is set to the end*/
    flex-flow: row wrap-reverse;
}
.AuxStuff .InfoBox {
    flex-grow: 1;
    /* if styling is disabled the info box is set first in the html, with
   styling we want to display it after the buttons if there is room on
   the same line or on the line above if not, so set order to move it
   after the buttons */
    order: 1; 
}
#settingsForm input[type="number" i] {
    max-width: 4.5ch;
    text-align: end;
    padding-inline-end: 1ch;
}
/* disable labels for hidden inputs */
input[type=hidden] + label, label:has(+input[type=hidden]) {
    display: none;
}
#levelCode {
    max-width: 100%;
    width: 60ch;
}
/** TODO: probably do better labeling of solvable or impossible than just shoving some text in the grid */
.GameBoard.solvable::after  { content: "solvable";}
.GameBoard.impossible::after {content: "impossible";}

.GameBoard {
    display: grid;
    /* this should get immidiately overridden by the javascript resize listener, if it fails to get the proper number this is the effective default */
    --n-rows: 10;
    --n-columns: auto-fill;
    /* the main sizing constraints are here */
    /* the column size maximum is the main width of the tubes including margin, the target is the minimum size for smaller screens and 
    and the min is based on the width of the label + margins and border and padding etc to overrule the minimum screen portion if it would cutoff the labels */
    grid-template-columns: repeat(var(--n-columns), clamp(2ch, 18vw, calc(var(--ball-size) + 2 * (var(--tube-border-size) + var(--tube-padding-size)))));
    /* the rows roughly specify the height of the balls with some offset due to margins and borders of the tubes, the minimum is just a bit more than the height of the label to try to account for marigns
    the default is some fraction of the screen divided by the calculated number of rows to keep the whole grid on the screen, and the maximum is the size that should be taken up if there is plenty of room on the screen
    and the game doesn't need the full height (typical on desktop) */
    grid-auto-rows: clamp(1.5em, calc(90vh / var(--n-rows)), var(--ball-size));
    grid-auto-flow: dense;
    /* put good spaces around the tubes  */
    justify-content: space-evenly;
    /* take up full width of body (or other container) */
    width: 100%;
    column-gap: var(--gap-size);
}

.Tube {
    --border-transp: 1;
    /* tube spans over rows based on capacity */
    grid-row-end: span var(--capacity);
    /* display balls from bottom to top */
    display: flex;
    flex-direction: column-reverse;

    padding: var(--tube-padding-size);
    border-width: var(--tube-border-size);
    border-style: solid;
    border-color: light-dark(rgba(0,0,0, var(--border-transp)), rgba(255,255,255, var(--border-transp)));
    /* will take up available space in width and height */
    width: auto;
    height: auto;
    /* since tubes are all different heights we use margin-top for the vertical gaps instead of within grid, applying grid gaps would effectively put gaps between balls although because the balls are within tubes it just messes up spacing */
    margin-top: var(--gap-size);

}
/* regarding alive and visited, mostly they come together so making it
  double border and thicker is fairly subtle but if the user cheats
  states will have alive but not visited and if they traverse dead
  paths or find the winning path they will not be considered alive but will be visited.

Having visited dead paths be doubled vs thicker and unexplored but
known to be unexplored be thicker seems like the best combo to me */
/* show thicker border around states that have been explicitly visited,. */
.Tube.alive {
    border-width: calc(var(--tube-border-size) + var(--tube-padding-size));
    padding: 0;
}
/** if a state has been checked and not found to be dead but also hasn't been explicitly visited give a hue to the border */
.Tube.visited {
    border-style: double;
    /* border-color: rgba(0,0,150, var(--border-transp)); */
}
/* unmovable tubes show as faded compared to normal */
.Tube.unmovable {
    --border-transp: 0.1;
}
/* drain moves that would take up an empty tube will be dashed */
.Tube.drain, .Tube.shift {
    --border-transp: 0.7;
}
/* empty tubes will have a faint background to let them stand out a bit more */
.Tube.empty {
    background-color: rgba(128,128,128, 0.2);
}
/* if our game is ended show all tubes as winning, or individual ones*/
 .Tube.winning {
    border-color: rgba(0,240,150,1);
}
 .GameBoard.ended.winning {
     background-color: rgba(0,240,150,0.3);
 }
/** same deal with dead, except make sure dead doesn't override unmovable since they end up together */
.Tube.dead:not(.unmovable) {
    border-color: rgba(255,0,0,1);
}
.GameBoard.ended.dead {
    background-color: rgba(255,0,0,0.3);
}

@keyframes ballDrop {
    from {
        opacity: 0.1;
        transform: translateY(-100%);
    }
    to {
        opacity: inherit;
        transform: translateY(0);
    }
}
.Ball {
    display: flex;
    /* center span containing label as much as possible */
    justify-content: center; 
    align-items: center; 
    /* take up the full width of the tube and the fraction of the tube based on how many fit into this tube */
    width: 100%; 
    height: calc(100%/var(--capacity));
    /* do a simple animation upon creation to draw attention to where they go. */
    animation: ballDrop 0.5s ease-out forwards;
    /* in the event the padding of the label would overlap with other balls hide it */
    overflow: hidden;
}
/* shroud logic, if there is a body with a checkbox with id #disableFog that is not checked then balls with shroud get this*/
body:has(#disableFog:not(:checked)) .Ball.shroud:before {
    content: "?";
    background-color: light-dark(lightgrey, #555);
    display:flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
}
body:has(#disableFog:not(:checked)) .Ball.shroud > span {
    /* hide the span labeling the ball when it is shrouded, the :before
   would cover it visually but copy/paste or accessibility stuff could
   still interact with it */
    display: none;
}
/* set a slightly transparent background over the label to improve contrast */
.Ball > span {
    background-color: light-dark(rgba(255,255,255,0.7), rgba(0,0,0,0.4));
    padding: 0.25em;
}

.Ball.A { background-color: red; }
.Ball.B { background-color: blue; }
.Ball.C { background-color: lime; }
.Ball.D { background-color: magenta; }
.Ball.E { background-color: orange; }
.Ball.F { background-color: yellow; }
.Ball.G { background-color: lightseagreen; }
.Ball.H { background-color: darkgreen; }
.Ball.I { background-color: indigo; }
.Ball.J { background-color: pink; }
.Ball.K { background-color: mediumpurple; }
.Ball.L { background-color: maroon; }
.Ball.M { background-color: saddlebrown; }
.Ball.N { background-color: slategrey; }
.Ball.O {background-color: tan;}
.Ball.P {background-color: aqua;}
.Ball.Q {background: linear-gradient(to bottom, lime, blue);}
.Ball.R {background: linear-gradient(to bottom right, aqua, magenta);}
.Ball.S {background: linear-gradient(to right, blue, red);}
.Ball.T {background: linear-gradient(to bottom left, magenta, yellow);}
.Ball.U {background: linear-gradient(to right, red, lime);}
.Ball.V {background: linear-gradient(to bottom left, yellow, aqua);}
.Ball.W {background: linear-gradient(to bottom right, orange, purple);}
.Ball.X {background: linear-gradient(to bottom, pink, indigo);}
.Ball.Y {background: linear-gradient(to right ,magenta, red);}
.Ball.Z {background: linear-gradient(to bottom left, green, purple);}

